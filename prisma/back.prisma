generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id            Int        @id @default(autoincrement())
  line1         String     @db.VarChar(100)
  line2         String     @db.VarChar(100)
  city          String     @db.VarChar(100)
  postcode      String?    @db.VarChar(10)
  country_id    Int
  latitude      Decimal    @db.Decimal(16, 12)
  longitude     Decimal    @db.Decimal(16, 12)
  business_id   String?    @db.VarChar(8)
  user_id       String?    @db.VarChar(8)
  updated_by    String?    @db.VarChar(8)
  updated_on    DateTime?
  deleted_by    String?    @db.VarChar(8)
  deleted_on    DateTime?
  created_by    String?    @db.VarChar(8)
  created_on    DateTime   @default(now())
  rel_business  business?  @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_country   country    @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_country_id")
  rel_createdBy user_main? @relation("address_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy user_main? @relation("address_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy user_main? @relation("address_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_user_main user_main? @relation("address_user_idTouser_main", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_user_id")
}

model auth_business_rule {
  id          Int       @id @default(autoincrement())
  business_id String?   @db.VarChar(8)
  rule_name   String    @db.VarChar(48)
  created_on  DateTime  @default(now())
  business    business? @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  auth_rule   auth_rule @relation(fields: [rule_name], references: [rule_name], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_rule_name")

  @@index([business_id], map: "ix_auth_business_rule_business_id")
  @@index([rule_name], map: "ix_auth_business_rule_rule_name")
}

model auth_role {
  id                                         Int                 @id @default(autoincrement())
  role_name                                  String              @db.VarChar(32)
  role_info                                  String?             @db.VarChar(500)
  default_page                               String?             @db.VarChar(100)
  is_system                                  Boolean             @default(false)
  business_type                              e_type_business?
  business_id                                String?             @db.VarChar(8)
  updated_by                                 String?             @db.VarChar(8)
  updated_on                                 DateTime?
  deleted_by                                 String?             @db.VarChar(8)
  deleted_on                                 DateTime?
  created_by                                 String?             @db.VarChar(8)
  created_on                                 DateTime            @default(now())
  rel_business                               business?           @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy                              user_main?          @relation("auth_role_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy                              user_main?          @relation("auth_role_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy                              user_main?          @relation("auth_role_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_auth_rr_role_rule                      auth_rr_role_rule[]
  rel_user_main_user_main_role_idToauth_role user_main[]         @relation("user_main_role_idToauth_role")

  @@index([business_id], map: "ix_auth_role_business_id")
  @@index([is_system], map: "ix_auth_role_is_system")
  @@index([business_type], map: "ix_auth_role_type_business")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_rr_role_rule {
  id            Int        @id(map: "auth_role_rule_pkey") @default(autoincrement())
  role_id       Int
  rule_name     String     @db.VarChar(100)
  c             Boolean    @default(false)
  r             Boolean    @default(false)
  u             Boolean    @default(false)
  d             Boolean    @default(false)
  e             Boolean    @default(false)
  updated_by    String?    @db.VarChar(8)
  updated_on    DateTime?
  created_by    String?    @db.VarChar(8)
  created_on    DateTime?  @default(now())
  rel_createdBy user_main? @relation("auth_rr_role_rule_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_auth_role auth_role  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_role_id")
  rel_auth_rule auth_rule  @relation(fields: [rule_name], references: [rule_name], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_rule_name")
  rel_updatedBy user_main? @relation("auth_rr_role_rule_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([role_id], map: "ix_auth_role_rule_id")
  @@index([rule_name], map: "ix_auth_role_rule_name")
}

model auth_rule {
  id                     Int                  @id @default(autoincrement())
  rule_name              String               @unique(map: "auth_rule_rule_name_unique") @db.VarChar(48)
  display_name           String?              @db.VarChar(100)
  rule_info              String?              @db.VarChar(500)
  rule_group             e_type_rule_group?
  page_url               String?              @unique(map: "auth_rule_page_url_unique") @db.VarChar(100)
  icon                   String?              @db.VarChar(50)
  menu_group             String?              @db.VarChar(50)
  group_icon             String?              @db.VarChar(50)
  access_types           String               @db.VarChar(9)
  sort_order             Int?                 @unique(map: "auth_rule_sort_order_unique")
  updated_by             String?              @db.VarChar(8)
  updated_on             DateTime?
  deleted_by             String?              @db.VarChar(8)
  deleted_on             DateTime?
  created_by             String?              @db.VarChar(8)
  created_on             DateTime             @default(now())
  rel_auth_business_rule auth_business_rule[]
  rel_auth_rr_role_rule  auth_rr_role_rule[]
  rel_createdBy          user_main?           @relation("auth_rule_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy          user_main?           @relation("auth_rule_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy          user_main?           @relation("auth_rule_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([rule_name], map: "ix_auth_rule_name")
  @@index([page_url], map: "ix_auth_rule_page_url")
}

model business {
  id                                                             String               @id @unique(map: "business_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(90)
  business_type                                                  e_type_business
  business_name                                                  String               @unique(map: "business_business_name_unique") @db.VarChar(96)
  display_name                                                   String               @db.VarChar(96)
  owner_user_id                                                  String               @unique(map: "business_owner_user_id_unique") @db.VarChar(90)
  client_type                                                    e_type_client?
  payment_type                                                   e_type_payment?
  balance                                                        Decimal?             @default(0) @db.Decimal(90, 2)
  last_transaction_id                                            String?              @db.VarChar(100)
  stripe_code                                                    String?              @db.VarChar(100)
  gov_id                                                         String?              @db.VarChar(48)
  max_jobs_per_editor                                            Int?
  logo                                                           String?              @db.VarChar(100)
  phone_no                                                       String?              @db.VarChar(13)
  website                                                        String?              @db.VarChar(253)
  addr_line1                                                     String?              @db.VarChar(48)
  addr_line2                                                     String?              @db.VarChar(48)
  city                                                           String?              @db.VarChar(48)
  postcode                                                       String?              @db.VarChar(10)
  country_id                                                     Int
  currency_id                                                    Int
  legal_privacy_agreed_on                                        DateTime?
  legal_terms_agreed_on                                          DateTime?
  updated_by                                                     String?              @db.VarChar(90)
  updated_on                                                     DateTime?
  deleted_by                                                     String?              @db.VarChar(90)
  deleted_on                                                     DateTime?
  created_by                                                     String?              @db.VarChar(90)
  created_on                                                     DateTime             @default(now())
  is_legacy                                                      Boolean              @default(false)
  rel_address                                                    address[]
  rel_auth_business_rule                                         auth_business_rule[]
  rel_auth_role                                                  auth_role[]
  rel_country                                                    country              @relation("business_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_country_id")
  rel_createdBy                                                  user_main?           @relation("business_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_curr                                                       country              @relation("business_currency_idTocountry", fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_currency_id")
  rel_deletedBy                                                  user_main?           @relation("business_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_ownerUser                                                  user_main            @relation("business_owner_user_idTouser_main", fields: [owner_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_owner_user_id")
  rel_updatedBy                                                  user_main?           @relation("business_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  client_customer_client_customer_client_business_idTobusiness   client_customer[]    @relation("client_customer_client_business_idTobusiness")
  client_customer_client_customer_customer_business_idTobusiness client_customer[]    @relation("client_customer_customer_business_idTobusiness")
  rel_client_service                                             client_service[]
  rel_discount_level                                             discount_level[]
  rel_editor_bus_service                                         editor_bus_service[]
  rel_invAsBuyerBus                                              invoice[]            @relation("invoice_buyer_business_idTobusiness")
  rel_invAsSellerBus                                             invoice[]            @relation("invoice_seller_business_idTobusiness")
  rel_OrderAsClientBus                                           order_main[]         @relation("order_main_client_business_idTobusiness")
  rel_OrderAsEditorBus                                           order_main[]         @relation("order_main_editor_business_idTobusiness")
  rel_project                                                    project[]
  rel_service_access                                             service_access[]
  user_main_user_main_business_idTobusiness                      user_main[]          @relation("user_main_business_idTobusiness")
  rel_wallet_balance                                             wallet_balance[]

  @@index([business_name], map: "ix_business_business_name")
  @@index([business_type], map: "ix_business_business_type")
  @@index([client_type], map: "ix_business_client_type")
  @@index([country_id], map: "ix_business_country_id")
  @@index([currency_id], map: "ix_business_currency_id")
  @@index([payment_type], map: "ix_business_payment_type")
}

model client_customer {
  id                   BigInt     @id @default(autoincrement())
  client_business_id   String     @db.VarChar(8)
  customer_business_id String     @db.VarChar(8)
  created_by           String?    @db.VarChar(8)
  created_on           DateTime   @default(now())
  rel_clientBus        business   @relation("client_customer_client_business_idTobusiness", fields: [client_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_client_business_id")
  rel_user_main        user_main? @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_customerBus      business   @relation("client_customer_customer_business_idTobusiness", fields: [customer_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_customer_business_id")
}

model client_preference {
  id                   Int              @id @default(autoincrement())
  user_id              String           @db.VarChar(8)
  service_category_id  Int
  preference           String?
  updated_by           String?          @db.VarChar(8)
  updated_on           DateTime?
  deleted_by           String?          @db.VarChar(8)
  deleted_on           DateTime?
  created_by           String?          @db.VarChar(8)
  created_on           DateTime         @default(now())
  is_legacy            Boolean          @default(false)
  rel_createdBy        user_main?       @relation("client_preference_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy        user_main?       @relation("client_preference_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_service_category service_category @relation(fields: [service_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_category_id")
  rel_updatedBy        user_main?       @relation("client_preference_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_user             user_main        @relation("client_preference_user_idTouser_main", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_user_id")
}

model client_service {
  id                  Int        @id @default(autoincrement())
  service_category_id Int
  service_name        String     @db.VarChar(48)
  description         String
  preview_image       String     @db.VarChar(200)
  business_id         String     @db.VarChar(8)
  notes               String?
  updated_by          String?    @db.VarChar(8)
  updated_on          DateTime?
  deleted_by          String?    @db.VarChar(8)
  deleted_on          DateTime?
  created_by          String?    @db.VarChar(8)
  created_on          DateTime   @default(now())
  rel_business        business   @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy       user_main? @relation("client_service_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy       user_main? @relation("client_service_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy       user_main? @relation("client_service_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model content_file {
  id                      BigInt                    @id @default(autoincrement())
  order_id                String                    @db.VarChar(8)
  content_type            e_type_file_content
  file_name               String                    @db.VarChar(255)
  file_type               String                    @db.VarChar(75)
  file_mime               String?                   @db.VarChar(75)
  file_size               BigInt?
  file_path               String
  revised_file_id         BigInt?
  processing_status       e_status_image_processing @default(dbgenerated("'uploaded'::e_status_image_processing"))
  updated_by              String?                   @db.VarChar(8)
  updated_on              DateTime?
  deleted_by              String?                   @db.VarChar(8)
  deleted_on              DateTime?
  created_by              String?                   @db.VarChar(8)
  created_on              DateTime                  @default(now())
  is_legacy               Boolean                   @default(false)
  file_cdn                String?
  upload_id               String?                   @default(dbgenerated("func_un_ten()")) @db.VarChar(10)
  rel_createdBy           user_main?                @relation("content_file_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy           user_main?                @relation("content_file_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_order_main          order_main                @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_order_id")
  rel_updatedBy           user_main?                @relation("content_file_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_content_folder_file content_folder_file[]

  @@index([order_id], map: "ix_file_order_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model content_folder {
  id                                                                           BigInt                  @id @default(autoincrement())
  order_id                                                                     String                  @db.VarChar(8)
  content_type                                                                 e_type_file_content
  file_name                                                                    String                  @db.VarChar(255)
  file_qty                                                                     Int?                    @db.SmallInt
  file_size                                                                    Int?                    @db.SmallInt
  file_path                                                                    String
  updated_by                                                                   String?                 @db.VarChar(8)
  updated_on                                                                   DateTime?
  deleted_by                                                                   String?                 @db.VarChar(8)
  deleted_on                                                                   DateTime?
  created_by                                                                   String?                 @db.VarChar(8)
  created_on                                                                   DateTime                @default(now())
  is_legacy                                                                    Boolean                 @default(false)
  file_cdn                                                                     String?
  upload_id                                                                    String?                 @default(dbgenerated("func_un_ten()")) @db.VarChar(10)
  rel_createdBy                                                                user_main?              @relation("content_folder_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy                                                                user_main?              @relation("content_folder_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_order_main                                                               order_main              @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_order_id")
  rel_updatedBy                                                                user_main?              @relation("content_folder_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_content_folder_file                                                      content_folder_file[]
  content_folder_folder_content_folder_folder_child_folder_idTocontent_folder  content_folder_folder[] @relation("content_folder_folder_child_folder_idTocontent_folder")
  content_folder_folder_content_folder_folder_parent_folder_idTocontent_folder content_folder_folder[] @relation("content_folder_folder_parent_folder_idTocontent_folder")

  @@index([order_id], map: "ix_folder_order_id")
}

model content_folder_file {
  id                 BigInt              @id @default(autoincrement())
  file_id            BigInt
  folder_id          BigInt
  content_type       e_type_file_content
  created_on         DateTime            @default(now())
  is_legacy          Boolean             @default(false)
  rel_content_file   content_file        @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_file_id")
  rel_content_folder content_folder      @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_folder_id")

  @@index([file_id], map: "ix_folder_file_file_content")
  @@index([folder_id], map: "ix_folder_file_folder_content")
}

model content_folder_folder {
  id               BigInt         @id @default(autoincrement())
  parent_folder_id BigInt
  child_folder_id  BigInt
  created_on       DateTime       @default(now())
  is_legacy        Boolean        @default(false)
  rel_folderChild  content_folder @relation("content_folder_folder_child_folder_idTocontent_folder", fields: [child_folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_child_folder_id")
  rel_folderParent content_folder @relation("content_folder_folder_parent_folder_idTocontent_folder", fields: [parent_folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_folder_id")

  @@unique([parent_folder_id, child_folder_id], map: "content_folder_folder_parent_folder_id_child_folder_id_unique")
  @@index([child_folder_id], map: "ix_folder_folder_child")
  @@index([parent_folder_id], map: "ix_folder_folder_parent")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model country {
  id                 Int              @id @default(autoincrement())
  country_name       String           @unique(map: "country_country_name_unique") @db.VarChar(100)
  capital_city       String?          @db.VarChar(100)
  iso2               String           @unique(map: "country_iso2_unique") @db.VarChar(2)
  iso3               String           @unique(map: "country_iso3_unique") @db.VarChar(3)
  isd_code           String?          @db.VarChar(8)
  currency_code      String           @db.VarChar(3)
  currency_name      String           @db.VarChar(100)
  currency_symbol    String?          @db.VarChar(10)
  has_price          Boolean          @default(false)
  region             String?          @db.VarChar(100)
  rel_address        address[]
  rel_country        business[]       @relation("business_country_idTocountry")
  rel_curr           business[]       @relation("business_currency_idTocountry")
  rel_currency_rates currency_rates[]
  rel_invoice        invoice[]
  rel_order_detail   order_detail[]
}

model currency_rates {
  id           BigInt   @id @default(autoincrement())
  currency_id  Int
  rate_per_usd Decimal  @db.Decimal(12, 6)
  created_on   DateTime @default(now())
  rel_country  country  @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_currency_id")

  @@index([currency_id], map: "ix_t_currency_rates_currency_id")
}

model delivery {
  id                                        Int                     @id @default(autoincrement())
  user_id                                   String                  @db.VarChar(8)
  delivery_name                             String                  @db.VarChar(100)
  delivery_address                          String                  @db.VarChar(200)
  quantity                                  Int                     @db.SmallInt
  notes                                     String?
  order_state_id                            Int                     @db.SmallInt
  project_id                                String?                 @db.VarChar(8)
  is_auto_delivery                          Boolean                 @default(false)
  delivery_email                            String?                 @db.VarChar(200)
  is_delivered                              Boolean                 @default(false)
  invoice_id                                String?                 @db.VarChar(8)
  z_cloud_link_url                          String?                 @db.VarChar(200)
  z_completed_file_path                     String?
  z_completed_zip_file_path                 String?
  updated_by                                String?                 @db.VarChar(8)
  updated_on                                DateTime?
  deleted_by                                String?                 @db.VarChar(8)
  deleted_on                                DateTime?
  created_by                                String?                 @db.VarChar(8)
  created_on                                DateTime                @default(now())
  rel_createdBy                             user_main?              @relation("delivery_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy                             user_main?              @relation("delivery_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_invoice                               invoice?                @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
  rel_order_state                           order_state             @relation(fields: [order_state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_order_state_id")
  rel_project                               project?                @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_project_id")
  rel_updatedBy                             user_main?              @relation("delivery_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_user_main_delivery_user_idTouser_main user_main               @relation("delivery_user_idTouser_main", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  rel_delivery_type_content                 delivery_type_content[]
}

model delivery_type_content {
  id            Int            @id @default(autoincrement())
  delivery_id   Int
  content_type  e_type_content
  updated_by    String?        @db.VarChar(8)
  updated_on    DateTime?      @db.Timestamptz(6)
  deleted_by    String?        @db.VarChar(8)
  deleted_on    DateTime?
  created_by    String?        @db.VarChar(8)
  created_on    DateTime       @default(now())
  rel_createdBy user_main?     @relation("delivery_type_content_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy user_main?     @relation("delivery_type_content_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_delivery  delivery       @relation(fields: [delivery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_delivery_id")
  rel_updatedBy user_main?     @relation("delivery_type_content_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model discount {
  id                 Int              @id @default(autoincrement())
  discount_name      String           @db.VarChar(100)
  discount_type      e_type_discount  @default(dbgenerated("'percent'::e_type_discount"))
  discount_value     Json?
  discount_percent   Decimal?         @db.Decimal(4, 2)
  description        String?
  updated_by         String?          @db.VarChar(8)
  updated_on         DateTime?
  deleted_by         String?          @db.VarChar(8)
  deleted_on         DateTime?
  created_by         String?          @db.VarChar(8)
  created_on         DateTime         @default(now())
  legacy_discount_id String?          @db.VarChar(10)
  rel_createdBy      user_main?       @relation("discount_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBY      user_main?       @relation("discount_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy      user_main?       @relation("discount_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_discount_level discount_level[]
  rel_order_detail   order_detail[]
}

model discount_level {
  id                 Int            @id @default(autoincrement())
  discount_id        Int?
  service_id         Int?
  client_business_id String?        @db.VarChar(255)
  client_type        e_type_client?
  created_by         String?        @db.VarChar(255)
  created_on         DateTime       @default(now())
  is_legacy          Boolean        @default(false)
  rel_clientBusiness business?      @relation(fields: [client_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_client_business_id")
  rel_createdBy      user_main?     @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_discount       discount?      @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_discount_id")
  rel_service_main   service_main?  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
}

model editor_bus_service {
  id                Int                    @id @default(autoincrement())
  service_id        Int
  service_type_id   Int?
  parent_service_id Int?
  business_id       String                 @db.VarChar(8)
  price             Decimal                @db.Decimal(8, 2)
  state             e_state_editor_service @default(dbgenerated("'requested'::e_state_editor_service"))
  updated_by        String?                @db.VarChar(8)
  updated_on        DateTime?
  deleted_by        String?                @db.VarChar(8)
  deleted_on        DateTime?
  created_by        String?                @db.VarChar(8)
  created_on        DateTime               @default(now())
  is_legacy         Boolean                @default(false)
  business          business               @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy     user_main?             @relation("editor_bus_service_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy     user_main?             @relation("editor_bus_service_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_parentService service_main?          @relation("editor_bus_service_parent_service_idToservice_main", fields: [parent_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_service_id")
  rel_service       service_main           @relation("editor_bus_service_service_idToservice_main", fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
  rel_service_type  service_type?          @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_type_id")
  rel_updatedBy     user_main?             @relation("editor_bus_service_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model editor_user_service {
  id                Int                    @id @default(autoincrement())
  service_id        Int
  service_type_id   Int?
  parent_service_id Int?
  user_id           String                 @db.VarChar(8)
  price             Decimal                @db.Decimal(8, 2)
  state             e_state_editor_service @default(dbgenerated("'requested'::e_state_editor_service"))
  get_email_alert   Boolean                @default(false)
  updated_by        String?                @db.VarChar(8)
  updated_on        DateTime?
  deleted_by        String?                @db.VarChar(8)
  deleted_on        DateTime?
  created_by        String?                @db.VarChar(8)
  created_on        DateTime               @default(now())
  is_legacy         Boolean                @default(false)
  rel_createdBy     user_main?             @relation("editor_user_service_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy     user_main?             @relation("editor_user_service_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_parentService service_main?          @relation("editor_user_service_parent_service_idToservice_main", fields: [parent_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_service_id")
  rel_service       service_main           @relation("editor_user_service_service_idToservice_main", fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
  rel_service_type  service_type?          @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_type_id")
  rel_updatedBy     user_main?             @relation("editor_user_service_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_editorUser    user_main              @relation("editor_user_service_user_idTouser_main", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model invoice {
  id                      String                  @id @unique(map: "invoice_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(8)
  seller_business_id      String                  @db.VarChar(8)
  seller_user_id          String?                 @db.VarChar(8)
  buyer_business_id       String                  @db.VarChar(8)
  buyer_user_id           String?                 @db.VarChar(8)
  currency_id             Int                     @db.SmallInt
  tax_gst_type            e_type_gst?             @default(dbgenerated("'no gst'::e_type_gst"))
  gross_amount            Decimal                 @db.Decimal(8, 2)
  discount                Decimal                 @default(0) @db.Decimal(8, 2)
  tax_amount              Decimal                 @default(0) @db.Decimal(8, 2)
  net_amount              Decimal                 @db.Decimal(8, 2)
  usd_net_amount          Decimal                 @db.Decimal(10, 6)
  usd_rate                Decimal                 @db.Decimal(10, 6)
  date_due                String?                 @db.VarChar(255)
  date_follow_up          DateTime?               @db.Date
  is_paid                 Boolean                 @default(false)
  payment_intent          String?                 @db.VarChar(100)
  payment_term            e_type_payment?
  description             String?
  notes                   String?
  invoice_type            e_type_invoice
  invoice_creation_method e_type_invoice_creation @default(dbgenerated("'system'::e_type_invoice_creation"))
  w_legacy_invoice_id     String?                 @db.VarChar(24)
  updated_by              String?                 @db.VarChar(8)
  updated_on              DateTime?
  deleted_by              String?                 @db.VarChar(8)
  deleted_on              DateTime?
  created_by              String?                 @db.VarChar(8)
  created_on              DateTime                @default(now())
  rel_delivery            delivery[]
  rel_buyerBus            business                @relation("invoice_buyer_business_idTobusiness", fields: [buyer_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_buyer_business_id")
  rel_buyerUser           user_main?              @relation("invoice_buyer_user_idTouser_main", fields: [buyer_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_buyer_user_id")
  rel_createdBy           user_main?              @relation("invoice_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_country             country                 @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_currency_id")
  rel_deletedBy           user_main?              @relation("invoice_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_sellerBus           business                @relation("invoice_seller_business_idTobusiness", fields: [seller_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_seller_business_id")
  rel_sellerUser          user_main?              @relation("invoice_seller_user_idTouser_main", fields: [seller_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_seller_user_id")
  rel_updatedBy           user_main?              @relation("invoice_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_invoice_item        invoice_item[]
  rel_invoice_receipt     invoice_receipt[]
  rel_invoice_token       invoice_token[]
  rel_order_invoice       order_invoice[]
  rel_wallet_balance      wallet_balance[]

  @@index([buyer_business_id], map: "ix_invoice_buyer_business_id")
  @@index([buyer_user_id], map: "ix_invoice_buyer_user_id")
  @@index([created_on], map: "ix_invoice_invoice_date")
  @@index([seller_business_id], map: "ix_invoice_seller_business_id")
  @@index([seller_user_id], map: "ix_invoice_seller_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model invoice_item {
  id             Int         @id @default(autoincrement())
  invoice_id     String      @db.VarChar(8)
  order_id       String?     @db.VarChar(8)
  gross_amount   Decimal     @db.Decimal(8, 2)
  discount       Decimal     @db.Decimal(8, 2)
  tax_amount     Decimal     @db.Decimal(8, 2)
  net_amount     Decimal     @db.Decimal(8, 2)
  usd_net_amount Decimal     @db.Decimal(10, 6)
  usd_rate       Decimal     @db.Decimal(10, 6)
  description    String
  img_qty        Int         @db.SmallInt
  img_per_rate   Decimal     @db.Decimal(8, 2)
  updated_by     String?     @db.VarChar(8)
  updated_on     DateTime?
  created_by     String?     @db.VarChar(8)
  created_on     DateTime?   @default(now())
  rel_createdBY  user_main?  @relation("invoice_item_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_invoice    invoice     @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
  rel_updatedBY  user_main?  @relation("invoice_item_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_order_main order_main? @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_item_order_id_foreign")
}

model invoice_receipt {
  id             Int        @id @default(autoincrement())
  invoice_id     String     @db.VarChar(8)
  receipt_id     String     @db.VarChar(8)
  amount_applied Decimal    @db.Decimal(8, 2)
  updated_by     String?    @db.VarChar(8)
  updated_on     DateTime?
  created_by     String?    @db.VarChar(8)
  created_on     DateTime   @default(now())
  rel_createdBy  user_main? @relation("invoice_receipt_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_invoice    invoice    @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
  rel_receipt    receipt    @relation(fields: [receipt_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_receipt_id")
  rel_updatedBy  user_main? @relation("invoice_receipt_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([invoice_id], map: "ix_invoice_receipt_invoices_id")
  @@index([receipt_id], map: "ix_invoice_receipt_receipt_id")
}

model invoice_token {
  id          BigInt   @id @default(autoincrement())
  token       String   @db.VarChar(255)
  invoice_id  String   @db.VarChar(8)
  expiry_time DateTime
  rel_invoice invoice  @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
}

model log_api {
  id                BigInt     @id @default(autoincrement())
  request_url       String?
  server_action     String
  input_params      Json?
  output_params     Json?
  ipaddress         String?    @db.Inet
  remarks           String?
  errors            String?
  called_by         String?    @db.VarChar(8)
  created_on        DateTime
  date_completed_on DateTime?
  http_code         Int?
  session_id        String?    @db.VarChar(100)
  log_id            String?    @db.VarChar(20)
  rel_calledBy      user_main? @relation(fields: [called_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_called_by")

  @@index([called_by], map: "ix_t_log_called_by")
  @@index([date_completed_on], map: "ix_t_log_completed_on")
  @@index([created_on], map: "ix_t_log_created_on")
  @@index([input_params], map: "ix_t_log_input_params")
  @@index([server_action], map: "ix_t_log_server_action")
}

model log_type {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String?
  order_log   order_log[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_detail {
  id                 BigInt        @id @default(autoincrement())
  order_id           String        @db.VarChar(8)
  service_id         Int           @db.SmallInt
  service_type_id    Int?          @db.SmallInt
  quantity           Int           @db.SmallInt
  quantity_processed Int?          @db.SmallInt
  currency_id        Int           @db.SmallInt
  tax_gst_type       e_type_gst?   @default(dbgenerated("'no gst'::e_type_gst"))
  price_per_unit     Decimal       @db.Decimal(8, 2)
  discount_id        Int?
  discount           Decimal       @default(0) @db.Decimal(8, 2)
  gross_amount       Decimal       @db.Decimal(8, 2)
  tax_rate           Decimal?      @db.Decimal(8, 2)
  tax_amount         Decimal?      @db.Decimal(8, 2)
  net_amount         Decimal       @db.Decimal(8, 2)
  usd_rate           Decimal       @db.Decimal(10, 6)
  usd_net_amount     Decimal       @db.Decimal(10, 6)
  editor_bus_rate    Decimal?      @db.Decimal(8, 2)
  editor_bus_total   Decimal?      @db.Decimal(8, 2)
  editor_user_rate   Decimal?      @db.Decimal(8, 2)
  editor_user_total  Decimal?      @db.Decimal(8, 2)
  updated_by         String?       @db.VarChar(8)
  updated_on         DateTime?
  created_by         String?       @db.VarChar(8)
  created_on         DateTime      @default(now())
  is_legacy          Boolean       @default(false)
  rel_createdBy      user_main?    @relation("order_detail_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_country        country       @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_currency_id")
  rel_discount       discount?     @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_discount_id")
  rel_order_main     order_main    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_order_id")
  rel_service_main   service_main  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
  rel_service_type   service_type? @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_type_id")
  rel_updatedBy      user_main?    @relation("order_detail_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([currency_id], map: "ix_order_detail_currency_id")
  @@index([order_id], map: "ix_order_detail_order_id")
  @@index([service_id], map: "ix_order_detail_service_id")
  @@index([service_type_id], map: "ix_order_detail_service_type_id")
}

model order_invoice {
  id             Int        @id @default(autoincrement())
  order_id       String     @db.VarChar(8)
  invoice_id     String     @db.VarChar(8)
  created_by     String?    @db.VarChar(8)
  created_on     DateTime   @default(now())
  is_legacy      Boolean    @default(false)
  rel_createdBy  user_main? @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_invoice    invoice    @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
  rel_order_main order_main @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_order_id")
}

model order_log {
  id            BigInt     @id(map: "order_log_state_pkey") @default(autoincrement())
  order_id      String     @db.VarChar(8)
  state_id      Int?
  event         String?    @db.VarChar(48)
  notes         String?
  created_by    String?    @db.VarChar(8)
  created_on    DateTime   @default(now())
  log_type_id   Int?
  rel_createdBy user_main? @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_logType   log_type?  @relation(fields: [log_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_log_type_id")

  @@index([order_id], map: "ix_order_log_state_order_id")
  @@index([state_id], map: "ix_order_log_state_state_id")
}

model order_log_payment {
  id          BigInt          @id @default(autoincrement())
  order_id    String?         @db.VarChar(8)
  invoice_id  String?         @db.VarChar(8)
  event_id    String          @db.VarChar(100)
  order_event e_event_payment
  created_on  DateTime        @default(now())

  @@index([invoice_id], map: "ix_order_payment_log_invoice_id")
  @@index([order_id], map: "ix_order_payment_log_order_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_main {
  id                      String           @id @unique(map: "order_main_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(8)
  service_code            String           @db.VarChar(6)
  state_id                Int              @db.SmallInt
  order_name              String           @db.VarChar(255)
  project_id              String?          @db.VarChar(8)
  client_business_id      String?          @db.VarChar(8)
  date_due_on             DateTime?
  date_completed_on       DateTime?
  order_start_wait        Int              @default(0) @db.SmallInt
  order_wait_time         DateTime?
  editor_business_id      String?          @db.VarChar(8)
  editor_user_id          String?          @db.VarChar(8)
  editor_qc_id            String?          @db.VarChar(8)
  is_paid                 Boolean          @default(false)
  payment_intent          String?          @db.VarChar(100)
  payment_term            e_type_payment
  z_file_source_zip_path  String?
  z_file_output_zip_path  String?
  z_file_project_zip_path String?
  notes                   String?
  has_sales_inv           Boolean          @default(false)
  has_purchase_inv        Boolean          @default(false)
  updated_by              String?          @db.VarChar(8)
  updated_on              DateTime?
  deleted_by              String?          @db.VarChar(8)
  deleted_on              DateTime?
  created_by              String?          @db.VarChar(8)
  created_on              DateTime         @default(now())
  is_legacy               Boolean          @default(false)
  client_user_id          String?          @db.VarChar(8)
  content_file            content_file[]
  content_folder          content_folder[]
  invoice_item            invoice_item[]
  order_detail            order_detail[]
  order_invoice           order_invoice[]
  rel_clientUser          user_main?       @relation("order_main_client_user_idTouser_main", fields: [client_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_assigned_to_client")
  rel_editorUser          user_main?       @relation("order_main_editor_user_idTouser_main", fields: [editor_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_assigned_to_editor")
  rel_clientBus           business?        @relation("order_main_client_business_idTobusiness", fields: [client_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_client_business_id")
  rel_createdBy           user_main?       @relation("order_main_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy           user_main?       @relation("order_main_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_editorBus           business?        @relation("order_main_editor_business_idTobusiness", fields: [editor_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_editor_business_id")
  rel_project             project?         @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_project_id")
  rel_editorQcUser        user_main?       @relation("order_main_editor_qc_idTouser_main", fields: [editor_qc_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_qc_editor")
  rel_serviceMain         service_main     @relation(fields: [service_code], references: [service_code], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_code")
  rel_OrderState          order_state      @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_state_id")
  rel_updatedBy           user_main?       @relation("order_main_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([editor_user_id], map: "ix_orders_assigned_to_editor")
  @@index([client_business_id], map: "ix_orders_client_business_id")
  @@index([date_completed_on], map: "ix_orders_completed_on")
  @@index([date_due_on], map: "ix_orders_due_on")
  @@index([editor_business_id], map: "ix_orders_editor_business_id")
  @@index([is_paid], map: "ix_orders_is_paid")
  @@index([order_name], map: "ix_orders_order_name")
  @@index([project_id], map: "ix_orders_project_id")
  @@index([state_id], map: "ix_orders_state_id")
}

model order_state {
  id            Int          @id @default(autoincrement())
  state_name    String       @db.VarChar(32)
  state_color   String?      @db.VarChar(24)
  description   String?
  sort_order    Int?
  updated_by    String?      @db.VarChar(8)
  updated_on    DateTime?
  deleted_by    String?      @db.VarChar(8)
  deleted_on    DateTime?
  created_by    String?      @db.VarChar(8)
  created_on    DateTime     @default(now())
  delivery      delivery[]
  order_main    order_main[]
  rel_createdBy user_main?   @relation("order_state_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy user_main?   @relation("order_state_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy user_main?   @relation("order_state_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model project {
  id              String       @id @unique(map: "project_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(8)
  project_name    String?      @db.VarChar(100)
  project_address String?      @db.VarChar(200)
  business_id     String       @db.VarChar(8)
  latitude        Decimal      @db.Decimal(10, 8)
  longitude       Decimal      @db.Decimal(11, 8)
  updated_by      String?      @db.VarChar(8)
  updated_on      DateTime?
  deleted_by      String?      @db.VarChar(8)
  deleted_on      DateTime?
  created_by      String?      @db.VarChar(8)
  created_on      DateTime     @default(now())
  delivery        delivery[]
  order_main      order_main[]
  business        business     @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy   user_main?   @relation("project_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy   user_main?   @relation("project_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy   user_main?   @relation("project_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model receipt {
  id              String            @id @unique(map: "receipt_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(8)
  payment_date    DateTime
  amount          Decimal           @db.Decimal(8, 2)
  usd_rate        Decimal           @db.Decimal(10, 6)
  payment_ref     String            @db.VarChar(48)
  updated_by      String?           @db.VarChar(8)
  updated_on      DateTime?
  deleted_by      String?           @db.VarChar(8)
  deleted_on      DateTime?
  created_by      String?           @db.VarChar(8)
  created_on      DateTime          @default(now())
  invoice_receipt invoice_receipt[]
  rel_createdBy   user_main?        @relation("receipt_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy   user_main?        @relation("receipt_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy   user_main?        @relation("receipt_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model service_access {
  id                Int                    @id @default(autoincrement())
  service_id        Int
  service_type_id   Int?
  parent_service_id Int?
  business_id       String                 @db.VarChar(8)
  state             e_state_editor_service @default(dbgenerated("'requested'::e_state_editor_service"))
  updated_by        String?                @db.VarChar(8)
  updated_on        DateTime?
  deleted_by        String?                @db.VarChar(8)
  deleted_on        DateTime?
  created_by        String?                @db.VarChar(8)
  created_on        DateTime               @default(now())
  is_legacy         Boolean                @default(false)
  rel_business      business               @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy     user_main?             @relation("service_access_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy     user_main?             @relation("service_access_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_parentService service_main?          @relation("service_access_parent_service_idToservice_main", fields: [parent_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_service_id")
  rel_service       service_main           @relation("service_access_service_idToservice_main", fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
  rel_service_type  service_type?          @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_type_id")
  rel_updatedBy     user_main?             @relation("service_access_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model service_addon {
  id                Int          @id @default(autoincrement())
  parent_service_id Int
  addon_service_id  Int
  deleted_by        String?      @db.VarChar(8)
  deleted_on        DateTime?
  created_by        String?      @db.VarChar(8)
  created_on        DateTime     @default(now())
  rel_serviceAddon  service_main @relation("service_addon_addon_service_idToservice_main", fields: [addon_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_addon_service_id")
  rel_createdBy     user_main?   @relation("service_addon_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy     user_main?   @relation("service_addon_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_parentService service_main @relation("service_addon_parent_service_idToservice_main", fields: [parent_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_service_id")

  @@unique([parent_service_id, addon_service_id], map: "service_addon_parent_service_id_addon_service_id_unique")
}

model service_category {
  id                    Int                 @id @default(autoincrement())
  service_category_code String              @unique(map: "service_category_service_category_code_unique") @db.VarChar(6)
  service_category_name String              @db.VarChar(100)
  description           String?
  preview_image         String?             @db.VarChar(200)
  sort_order            Int?                @unique(map: "service_category_sort_order_unique")
  updated_by            String?             @db.VarChar(8)
  updated_on            DateTime?
  deleted_by            String?             @db.VarChar(8)
  deleted_on            DateTime?
  created_by            String?             @db.VarChar(8)
  created_on            DateTime            @default(now())
  rel_client_preference client_preference[]
  rel_createdBy         user_main?          @relation("service_category_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBY         user_main?          @relation("service_category_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_updatedBy         user_main?          @relation("service_category_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_service_main      service_main[]
  rel_service_type      service_type[]

  @@index([service_category_code], map: "ix_service_category_service_category_code")
  @@index([service_category_name], map: "ix_service_category_service_category_name")
  @@index([sort_order], map: "ix_service_category_sort_order")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_main {
  id                                                                      Int                   @id @default(autoincrement())
  service_code                                                            String                @unique(map: "service_main_service_code_unique") @db.VarChar(6)
  service_name                                                            String                @db.VarChar(100)
  service_category_id                                                     Int
  description                                                             String?
  client_access                                                           String?               @db.VarChar(6)
  client_type                                                             e_type_client
  default_due_time                                                        Int
  is_addon                                                                Boolean               @default(false)
  icon                                                                    String?               @db.VarChar(48)
  preview_image                                                           String?               @db.VarChar(200)
  project_files_required                                                  Boolean               @default(false)
  sort_order                                                              Decimal?              @unique(map: "service_main_sort_order_unique") @db.Decimal(4, 2)
  notes                                                                   String?
  instructions                                                            String?
  updated_by                                                              String?               @db.VarChar(8)
  updated_on                                                              DateTime?
  deleted_by                                                              String?               @db.VarChar(8)
  deleted_on                                                              DateTime?
  created_by                                                              String?               @db.VarChar(8)
  created_on                                                              DateTime              @default(now())
  is_legacy                                                               Boolean               @default(false)
  rel_discount_level                                                      discount_level[]
  editor_bus_service_editor_bus_service_parent_service_idToservice_main   editor_bus_service[]  @relation("editor_bus_service_parent_service_idToservice_main")
  editor_bus_service_editor_bus_service_service_idToservice_main          editor_bus_service[]  @relation("editor_bus_service_service_idToservice_main")
  editor_user_service_editor_user_service_parent_service_idToservice_main editor_user_service[] @relation("editor_user_service_parent_service_idToservice_main")
  editor_user_service_editor_user_service_service_idToservice_main        editor_user_service[] @relation("editor_user_service_service_idToservice_main")
  rel_order_detail                                                        order_detail[]
  rel_order_main                                                          order_main[]
  service_access_service_access_parent_service_idToservice_main           service_access[]      @relation("service_access_parent_service_idToservice_main")
  service_access_service_access_service_idToservice_main                  service_access[]      @relation("service_access_service_idToservice_main")
  rel_serviceAddon                                                        service_addon[]       @relation("service_addon_addon_service_idToservice_main")
  rel_serviceParent                                                       service_addon[]       @relation("service_addon_parent_service_idToservice_main")
  rel_createBy                                                            user_main?            @relation("service_main_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy                                                           user_main?            @relation("service_main_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_service_category                                                    service_category      @relation(fields: [service_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_category_id")
  rel_updatedBy                                                           user_main?            @relation("service_main_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_service_price                                                       service_price[]

  @@index([client_type], map: "ix_service_client_type")
  @@index([is_addon], map: "ix_service_is_addon")
  @@index([service_category_id], map: "ix_service_service_category_id")
  @@index([service_code], map: "ix_service_service_code")
  @@index([service_name], map: "ix_service_service_name")
  @@index([sort_order], map: "ix_service_sort_order")
}

model service_price {
  service_id       Int
  id               Int           @id @default(autoincrement())
  service_type_id  Int?
  price_type       e_type_price
  gross_price      Json
  tax_rate         Json
  retail_price     Json
  updated_by       String?       @db.VarChar(8)
  updated_on       DateTime?
  deleted_by       String?       @db.VarChar(8)
  deleted_on       DateTime?
  created_by       String?       @db.VarChar(8)
  created_on       DateTime      @default(now())
  is_legacy        Boolean       @default(false)
  rel_createdBy    user_main?    @relation("service_price_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy    user_main?    @relation("service_price_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_service_main service_main  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_id")
  rel_service_type service_type? @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_type_id")
  rel_updatedBy    user_main?    @relation("service_price_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
}

model service_type {
  id                      Int                   @id @default(autoincrement())
  service_type_code       String                @unique(map: "service_type_service_type_code_unique") @db.VarChar(6)
  service_type_name       String                @db.VarChar(100)
  service_category_id     Int
  description             String?
  preview_image           String?               @db.VarChar(200)
  sort_order              Int?                  @unique(map: "service_type_sort_order_unique")
  updated_by              String?               @db.VarChar(8)
  updated_on              DateTime?             @db.Timestamptz(6)
  deleted_by              String?               @db.VarChar(8)
  deleted_on              DateTime?             @db.Timestamptz(6)
  created_by              String?               @db.VarChar(8)
  created_on              DateTime              @default(now()) @db.Timestamptz(6)
  rel_editor_bus_service  editor_bus_service[]
  rel_editor_user_service editor_user_service[]
  rel_order_detail        order_detail[]
  rel_service_access      service_access[]
  rel_service_price       service_price[]
  rel_createdBy           user_main?            @relation("service_type_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy           user_main?            @relation("service_type_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_service_category    service_category      @relation(fields: [service_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_service_category_id")
  rel_updatedBy           user_main?            @relation("service_type_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")

  @@index([service_type_code], map: "ix_service_type_service_type_code")
  @@index([service_type_name], map: "ix_service_type_service_type_name")
  @@index([sort_order], map: "ix_service_type_sort_order")
}

model sessions {
  sid     String   @id @db.VarChar(255)
  sess    Json     @db.Json
  expired DateTime @db.Timestamptz(6)

  @@index([expired], map: "sessions_expired_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_main {
  user_id                                                           String                  @id @unique(map: "user_main_user_id_unique") @default(dbgenerated("func_un_eight()")) @db.VarChar(8)
  name_first                                                        String                  @db.VarChar(100)
  name_last                                                         String?                 @db.VarChar(100)
  email_id                                                          String                  @unique(map: "user_main_email_id_unique") @db.VarChar(200)
  role_id                                                           Int
  business_id                                                       String?                 @db.VarChar(8)
  title                                                             String?                 @db.VarChar(200)
  phone_no                                                          String?                 @db.VarChar(15)
  pass                                                              String?                 @db.VarChar(256)
  pass_reset_token                                                  String?                 @db.Uuid
  pass_reset_token_expiry                                           DateTime?
  last_login_ip                                                     String?                 @db.Inet
  last_login_time                                                   DateTime?
  profile_image                                                     String?                 @db.VarChar(100)
  max_jobs                                                          Int?
  stripe_code                                                       String?                 @db.VarChar(100)
  addr_line1                                                        String?                 @db.VarChar(100)
  addr_line2                                                        String?                 @db.VarChar(100)
  city                                                              String?                 @db.VarChar(48)
  postcode                                                          String?                 @db.VarChar(10)
  country_id                                                        Int?
  updated_by                                                        String?                 @db.VarChar(8)
  updated_on                                                        DateTime?
  deleted_by                                                        String?                 @db.VarChar(8)
  deleted_on                                                        DateTime?
  created_by                                                        String?                 @db.VarChar(8)
  created_on                                                        DateTime                @default(now())
  is_legacy                                                         Boolean                 @default(false)
  email_verified                                                    DateTime?               @db.Timestamp(6)
  email_token                                                       String?                 @db.VarChar(200)
  address_address_created_byTouser_main                             address[]               @relation("address_created_byTouser_main")
  address_address_deleted_byTouser_main                             address[]               @relation("address_deleted_byTouser_main")
  address_address_updated_byTouser_main                             address[]               @relation("address_updated_byTouser_main")
  address_address_user_idTouser_main                                address[]               @relation("address_user_idTouser_main")
  auth_role_auth_role_created_byTouser_main                         auth_role[]             @relation("auth_role_created_byTouser_main")
  auth_role_auth_role_deleted_byTouser_main                         auth_role[]             @relation("auth_role_deleted_byTouser_main")
  auth_role_auth_role_updated_byTouser_main                         auth_role[]             @relation("auth_role_updated_byTouser_main")
  auth_rr_role_rule_auth_rr_role_rule_created_byTouser_main         auth_rr_role_rule[]     @relation("auth_rr_role_rule_created_byTouser_main")
  auth_rr_role_rule_auth_rr_role_rule_updated_byTouser_main         auth_rr_role_rule[]     @relation("auth_rr_role_rule_updated_byTouser_main")
  auth_rule_auth_rule_created_byTouser_main                         auth_rule[]             @relation("auth_rule_created_byTouser_main")
  auth_rule_auth_rule_deleted_byTouser_main                         auth_rule[]             @relation("auth_rule_deleted_byTouser_main")
  auth_rule_auth_rule_updated_byTouser_main                         auth_rule[]             @relation("auth_rule_updated_byTouser_main")
  business_business_created_byTouser_main                           business[]              @relation("business_created_byTouser_main")
  business_business_deleted_byTouser_main                           business[]              @relation("business_deleted_byTouser_main")
  rel_busOwner                                                      business?               @relation("business_owner_user_idTouser_main")
  business_business_updated_byTouser_main                           business[]              @relation("business_updated_byTouser_main")
  client_customer                                                   client_customer[]
  client_preference_client_preference_created_byTouser_main         client_preference[]     @relation("client_preference_created_byTouser_main")
  client_preference_client_preference_deleted_byTouser_main         client_preference[]     @relation("client_preference_deleted_byTouser_main")
  client_preference_client_preference_updated_byTouser_main         client_preference[]     @relation("client_preference_updated_byTouser_main")
  client_preference_client_preference_user_idTouser_main            client_preference[]     @relation("client_preference_user_idTouser_main")
  client_service_client_service_created_byTouser_main               client_service[]        @relation("client_service_created_byTouser_main")
  client_service_client_service_deleted_byTouser_main               client_service[]        @relation("client_service_deleted_byTouser_main")
  client_service_client_service_updated_byTouser_main               client_service[]        @relation("client_service_updated_byTouser_main")
  content_file_content_file_created_byTouser_main                   content_file[]          @relation("content_file_created_byTouser_main")
  content_file_content_file_deleted_byTouser_main                   content_file[]          @relation("content_file_deleted_byTouser_main")
  content_file_content_file_updated_byTouser_main                   content_file[]          @relation("content_file_updated_byTouser_main")
  content_folder_content_folder_created_byTouser_main               content_folder[]        @relation("content_folder_created_byTouser_main")
  content_folder_content_folder_deleted_byTouser_main               content_folder[]        @relation("content_folder_deleted_byTouser_main")
  content_folder_content_folder_updated_byTouser_main               content_folder[]        @relation("content_folder_updated_byTouser_main")
  delivery_delivery_created_byTouser_main                           delivery[]              @relation("delivery_created_byTouser_main")
  delivery_delivery_deleted_byTouser_main                           delivery[]              @relation("delivery_deleted_byTouser_main")
  delivery_delivery_updated_byTouser_main                           delivery[]              @relation("delivery_updated_byTouser_main")
  delivery_delivery_user_idTouser_main                              delivery[]              @relation("delivery_user_idTouser_main")
  delivery_type_content_delivery_type_content_created_byTouser_main delivery_type_content[] @relation("delivery_type_content_created_byTouser_main")
  delivery_type_content_delivery_type_content_deleted_byTouser_main delivery_type_content[] @relation("delivery_type_content_deleted_byTouser_main")
  delivery_type_content_delivery_type_content_updated_byTouser_main delivery_type_content[] @relation("delivery_type_content_updated_byTouser_main")
  discount_discount_created_byTouser_main                           discount[]              @relation("discount_created_byTouser_main")
  discount_discount_deleted_byTouser_main                           discount[]              @relation("discount_deleted_byTouser_main")
  discount_discount_updated_byTouser_main                           discount[]              @relation("discount_updated_byTouser_main")
  discount_level                                                    discount_level[]
  editor_bus_service_editor_bus_service_created_byTouser_main       editor_bus_service[]    @relation("editor_bus_service_created_byTouser_main")
  editor_bus_service_editor_bus_service_deleted_byTouser_main       editor_bus_service[]    @relation("editor_bus_service_deleted_byTouser_main")
  editor_bus_service_editor_bus_service_updated_byTouser_main       editor_bus_service[]    @relation("editor_bus_service_updated_byTouser_main")
  editor_user_service_editor_user_service_created_byTouser_main     editor_user_service[]   @relation("editor_user_service_created_byTouser_main")
  editor_user_service_editor_user_service_deleted_byTouser_main     editor_user_service[]   @relation("editor_user_service_deleted_byTouser_main")
  editor_user_service_editor_user_service_updated_byTouser_main     editor_user_service[]   @relation("editor_user_service_updated_byTouser_main")
  editor_user_service_editor_user_service_user_idTouser_main        editor_user_service[]   @relation("editor_user_service_user_idTouser_main")
  invoice_invoice_buyer_user_idTouser_main                          invoice[]               @relation("invoice_buyer_user_idTouser_main")
  invoice_invoice_created_byTouser_main                             invoice[]               @relation("invoice_created_byTouser_main")
  invoice_invoice_deleted_byTouser_main                             invoice[]               @relation("invoice_deleted_byTouser_main")
  invoice_invoice_seller_user_idTouser_main                         invoice[]               @relation("invoice_seller_user_idTouser_main")
  invoice_invoice_updated_byTouser_main                             invoice[]               @relation("invoice_updated_byTouser_main")
  invoice_item_invoice_item_created_byTouser_main                   invoice_item[]          @relation("invoice_item_created_byTouser_main")
  invoice_item_invoice_item_updated_byTouser_main                   invoice_item[]          @relation("invoice_item_updated_byTouser_main")
  invoice_receipt_invoice_receipt_created_byTouser_main             invoice_receipt[]       @relation("invoice_receipt_created_byTouser_main")
  invoice_receipt_invoice_receipt_updated_byTouser_main             invoice_receipt[]       @relation("invoice_receipt_updated_byTouser_main")
  log_api                                                           log_api[]
  order_detail_order_detail_created_byTouser_main                   order_detail[]          @relation("order_detail_created_byTouser_main")
  order_detail_order_detail_updated_byTouser_main                   order_detail[]          @relation("order_detail_updated_byTouser_main")
  order_invoice                                                     order_invoice[]
  order_log                                                         order_log[]
  order_main_order_main_client_user_idTouser_main                   order_main[]            @relation("order_main_client_user_idTouser_main")
  order_main_order_main_editor_user_idTouser_main                   order_main[]            @relation("order_main_editor_user_idTouser_main")
  order_main_order_main_created_byTouser_main                       order_main[]            @relation("order_main_created_byTouser_main")
  order_main_order_main_deleted_byTouser_main                       order_main[]            @relation("order_main_deleted_byTouser_main")
  order_main_order_main_editor_qc_idTouser_main                     order_main[]            @relation("order_main_editor_qc_idTouser_main")
  order_main_order_main_updated_byTouser_main                       order_main[]            @relation("order_main_updated_byTouser_main")
  order_state_order_state_created_byTouser_main                     order_state[]           @relation("order_state_created_byTouser_main")
  order_state_order_state_deleted_byTouser_main                     order_state[]           @relation("order_state_deleted_byTouser_main")
  order_state_order_state_updated_byTouser_main                     order_state[]           @relation("order_state_updated_byTouser_main")
  project_project_created_byTouser_main                             project[]               @relation("project_created_byTouser_main")
  project_project_deleted_byTouser_main                             project[]               @relation("project_deleted_byTouser_main")
  project_project_updated_byTouser_main                             project[]               @relation("project_updated_byTouser_main")
  receipt_receipt_created_byTouser_main                             receipt[]               @relation("receipt_created_byTouser_main")
  receipt_receipt_deleted_byTouser_main                             receipt[]               @relation("receipt_deleted_byTouser_main")
  receipt_receipt_updated_byTouser_main                             receipt[]               @relation("receipt_updated_byTouser_main")
  service_access_service_access_created_byTouser_main               service_access[]        @relation("service_access_created_byTouser_main")
  service_access_service_access_deleted_byTouser_main               service_access[]        @relation("service_access_deleted_byTouser_main")
  service_access_service_access_updated_byTouser_main               service_access[]        @relation("service_access_updated_byTouser_main")
  service_addon_service_addon_created_byTouser_main                 service_addon[]         @relation("service_addon_created_byTouser_main")
  service_addon_service_addon_deleted_byTouser_main                 service_addon[]         @relation("service_addon_deleted_byTouser_main")
  service_category_service_category_created_byTouser_main           service_category[]      @relation("service_category_created_byTouser_main")
  service_category_service_category_deleted_byTouser_main           service_category[]      @relation("service_category_deleted_byTouser_main")
  service_category_service_category_updated_byTouser_main           service_category[]      @relation("service_category_updated_byTouser_main")
  service_main_service_main_created_byTouser_main                   service_main[]          @relation("service_main_created_byTouser_main")
  service_main_service_main_deleted_byTouser_main                   service_main[]          @relation("service_main_deleted_byTouser_main")
  service_main_service_main_updated_byTouser_main                   service_main[]          @relation("service_main_updated_byTouser_main")
  service_price_service_price_created_byTouser_main                 service_price[]         @relation("service_price_created_byTouser_main")
  service_price_service_price_deleted_byTouser_main                 service_price[]         @relation("service_price_deleted_byTouser_main")
  service_price_service_price_updated_byTouser_main                 service_price[]         @relation("service_price_updated_byTouser_main")
  service_type_service_type_created_byTouser_main                   service_type[]          @relation("service_type_created_byTouser_main")
  service_type_service_type_deleted_byTouser_main                   service_type[]          @relation("service_type_deleted_byTouser_main")
  service_type_service_type_updated_byTouser_main                   service_type[]          @relation("service_type_updated_byTouser_main")
  rel_bus                                                           business?               @relation("user_main_business_idTobusiness", fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_business_id")
  rel_createdBy                                                     user_main?              @relation("user_main_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  other_user_main_user_main_created_byTouser_main                   user_main[]             @relation("user_main_created_byTouser_main")
  rel_deletedBy                                                     user_main?              @relation("user_main_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  other_user_main_user_main_deleted_byTouser_main                   user_main[]             @relation("user_main_deleted_byTouser_main")
  rel_role                                                          auth_role               @relation("user_main_role_idToauth_role", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_role_id")
  rel_updatedBy                                                     user_main?              @relation("user_main_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  other_user_main_user_main_updated_byTouser_main                   user_main[]             @relation("user_main_updated_byTouser_main")
  rel_childOf                                                       user_parent_child[]     @relation("user_parent_child_child_user_idTouser_main")
  user_parent_child_user_parent_child_created_byTouser_main         user_parent_child[]     @relation("user_parent_child_created_byTouser_main")
  user_parent_child_user_parent_child_deleted_byTouser_main         user_parent_child[]     @relation("user_parent_child_deleted_byTouser_main")
  rel_parentOf                                                      user_parent_child[]     @relation("user_parent_child_parent_user_idTouser_main")
  wallet_balance_wallet_balance_created_byTouser_main               wallet_balance[]        @relation("wallet_balance_created_byTouser_main")
  wallet_balance_wallet_balance_updated_byTouser_main               wallet_balance[]        @relation("wallet_balance_updated_byTouser_main")

  @@index([business_id], map: "ix_user_business_id")
  @@index([country_id], map: "ix_user_country_id")
  @@index([email_id], map: "ix_user_email_id")
  @@index([name_first], map: "ix_user_first_name")
  @@index([name_last], map: "ix_user_last_name")
  @@index([stripe_code], map: "ix_user_stripe_code")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_parent_child {
  id             Int        @id @default(autoincrement())
  parent_user_id String     @db.VarChar(8)
  child_user_id  String     @db.VarChar(8)
  deleted_by     String?    @db.VarChar(8)
  deleted_on     DateTime?
  created_by     String?    @db.VarChar(8)
  created_on     DateTime   @default(now())
  rel_userChild  user_main  @relation("user_parent_child_child_user_idTouser_main", fields: [child_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_child_user_id")
  rel_createdBy  user_main? @relation("user_parent_child_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_deletedBy  user_main? @relation("user_parent_child_deleted_byTouser_main", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_deleted_by")
  rel_userParent user_main  @relation("user_parent_child_parent_user_idTouser_main", fields: [parent_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_parent_user_id")

  @@unique([parent_user_id, child_user_id], map: "user_parent_child_parent_user_id_child_user_id_unique")
}

model w_knex_migration {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model w_knex_migration_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model wallet_balance {
  id             String           @id @default("func_un_eight()") @db.VarChar(255)
  transaction_id String?          @db.VarChar(255)
  payment_intent String?          @db.VarChar(255)
  description    String?          @db.VarChar(255)
  invoice_id     String?          @db.VarChar(255)
  amount         Decimal?         @db.Decimal(8, 2)
  state          e_event_payment?
  business_id    String?          @db.VarChar(255)
  updated_by     String?          @db.VarChar(255)
  updated_on     DateTime?
  created_by     String?          @db.VarChar(255)
  created_on     DateTime?
  rel_createdBy  user_main?       @relation("wallet_balance_created_byTouser_main", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_created_by")
  rel_invoice    invoice?         @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_invoice_id")
  rel_updatedBy  user_main?       @relation("wallet_balance_updated_byTouser_main", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_con_updated_by")
  rel_business   business?        @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallet_balance_business_id_foreign")
}

model wappler_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model wappler_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_interim_userdet_client_service {
  user_id       String? @db.VarChar(8)
  business_id   String? @db.VarChar(8)
  serviceaccess String? @db.VarChar(128)
  service_id    Int?    @db.SmallInt

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_invoice_order_mapping {
  invoice_id    String? @db.VarChar(8)
  relcomporders String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_output_file {
  zzz_order_id String? @db.VarChar(32)
  order_id     String? @db.VarChar(8)
  files_source String?
  thumb_source String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_project_file {
  zzz_order_id  String? @db.VarChar(32)
  order_id      String? @db.VarChar(8)
  files_project String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_source_file {
  zzz_order_id String? @db.VarChar(32)
  order_id     String? @db.VarChar(8)
  file_source  String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_zipped_completed {
  zzz_order_id String? @db.VarChar(32)
  order_id     String? @db.VarChar(8)
  zipcompleted String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_zipped_project {
  zzz_order_id String? @db.VarChar(32)
  order_id     String? @db.VarChar(8)
  zipproject   String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_order_zipped_source {
  zzz_order_id   String? @db.VarChar(32)
  order_id       String? @db.VarChar(8)
  zipsource      String?
  order_state_id Int?    @db.SmallInt

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_project_order {
  zzz_project_id String? @db.VarChar(32)
  project_id     String? @db.VarChar(8)
  zzz_order_id   String? @db.VarChar(100)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zz_temp_user_parent_child {
  parent_user_id String? @db.VarChar(32)
  m_owner_id     String? @db.VarChar(8)
  child_user_id  String? @db.VarChar(32)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_business {
  Address                                      String?
  BusinessName                                 String?
  BusType                                      String?
  Currency                                     String?
  Email                                        String?
  GovID                                        String?
  IDBusiness                                   String?
  JobsPerEditor                                Int?
  Legal_PrivacyAgreed                          DateTime? @db.Timestamp(6)
  Legal_TermsAgreed                            DateTime? @db.Timestamp(6)
  Logo                                         String?
  MessagingApp                                 String?
  PaymentDetails                               String?
  PhoneText                                    String?
  RelOwnerDets                                 String?
  RelTeamUserDets                              String?
  Status                                       String?
  Website                                      String?
  z_deprec_Currency                            String?
  z_deprec_Phone                               String?
  z_deprec_Status                              String?
  z_deprec_Type                                String?
  zz_depre_BusinessNumber                      String?
  zz_depre_stripe_seller_id_bus                String?
  zz_deprec_RelOwnerDets                       String?
  zz_deprec_Set_RelHideEditingPricing_UserDets String?
  zz_deprec_Set_RelTeamPayEditingUserDets      String?
  Creation_Date                                DateTime? @default(now()) @db.Timestamp(6)
  Modified_Date                                DateTime? @default(now()) @db.Timestamp(6)
  Slug                                         String?
  Creator                                      String?
  unique_id                                    String?
  is_deleted                                   Boolean?  @default(false)
  business_id                                  String?   @db.VarChar(8)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_customer {
  BusinessName    String?
  Copy_First_Last String?
  DateEmailSignUp DateTime? @db.Timestamp(6)
  IDCustomer      String?
  IEServiceAccess String?
  ImageRatio      String?
  PeNotesPrivate  String?
  RelCustUserDets String?
  RelLogo         String?
  RelPEBus        String?
  RelPeUserDets   String?
  RelWatermark    String?
  Creation_Date   DateTime? @default(now()) @db.Timestamp(6)
  Modified_Date   DateTime? @default(now()) @db.Timestamp(6)
  Slug            String?
  Creator         String?
  unique_id       String?
  is_deleted      Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_discount {
  Description           String?
  DiscountType          String?
  DisPercentage         Decimal?  @db.Decimal(12, 4)
  DisRate_AUD           Decimal?  @db.Decimal(12, 4)
  DisRate_CAD           Decimal?  @db.Decimal(12, 4)
  DisRate_EUR           Decimal?  @db.Decimal(12, 4)
  DisRate_GBP           Decimal?  @db.Decimal(12, 4)
  DisRate_NZD           Decimal?  @db.Decimal(12, 4)
  DisRate_USD           Decimal?  @db.Decimal(12, 4)
  EntityType            String?
  ExpirationDate        DateTime? @db.Timestamp(6)
  IDDiscount            String?
  RelReferral           String?
  RelRefUserDets        String?
  RelRoleUser           String?
  RelServiceList        String?
  RelUserUserDets       String?
  zz_deprec_ClientRoles String?
  Creation_Date         DateTime? @db.Timestamp(6)
  Modified_Date         DateTime? @db.Timestamp(6)
  Slug                  String?
  Creator               String?
  unique_id             String?
  is_deleted            Boolean?  @default(false)
  discount_id           Int       @default(autoincrement())

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_invoice {
  CreatedBySoftware          String?
  Currency                   String?
  EmailFollowDate            String?
  IE_Cost                    String?
  IE_Rev                     Decimal?  @db.Decimal(12, 4)
  IE_Rev_USD_Equiv           Decimal?  @db.Decimal(12, 4)
  Inv_Amount                 Decimal?  @db.Decimal(12, 4)
  Inv_Date_Due               DateTime? @db.Timestamp(6)
  Inv_Date_Paid              DateTime? @db.Timestamp(6)
  Inv_Description            String?
  Inv_Discount_Amount        Decimal?  @db.Decimal(12, 4)
  Inv_GST_Amount             Decimal?  @db.Decimal(12, 4)
  Inv_GST_IncExc             String?
  Inv_GST_Rate               BigInt?
  Inv_GST_Type               String?
  Inv_ID_Invoice             String?
  Inv_Month_Year             String?
  Inv_Note                   String?
  Inv_Receipt_Link_Info      String?
  Inv_Status                 String?
  Inv_Status_Note            String?
  InvType                    String?
  OthStripeUse               String?
  Pay_Air_Id_Intent          String?
  Pay_Stripe_SessionIds      String?
  QRCode                     String?
  Rating_Avg                 String?
  RelBookingList             String?
  RelCompOrders              String?
  RelCreatorBus              String?
  RelCreatorDets             String?
  RelDiscounts               String?
  RelEEBus                   String?
  RelEEUserDets              String?
  RelERBus                   String?
  RelERUserDets              String?
  RelLineItem                String?
  TestTest                   String?
  z_deprec_Inv_Inv_Frequency String?
  z_deprec_Inv_Inv_Type      String?
  z_derpec_Inv_GST_IncExc    String?
  zz_depre_Inv_Note_Payment  String?
  zz_depre_Inv_Web_Url       String?
  zz_deprec_Inv_Currency     String?
  zz_deprec_Inv_Status       String?
  zz_deprec_RelEEUserDets    String?
  zz_deprec_RelERUserDets    String?
  Creation_Date              DateTime? @db.Timestamp(6)
  Modified_Date              DateTime? @db.Timestamp(6)
  Slug                       String?
  Creator                    String?
  unique_id                  String?
  is_deleted                 Boolean?  @default(false)
  invoice_id                 String?   @db.VarChar(8)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_job_app {
  EditorCost           Decimal?  @db.Decimal(12, 4)
  RelEditorUserDets    String?
  RelServiceList       String?
  StatusJob            String?
  zz_depre_ServiceCode String?
  zz_depre_ServiceType String?
  zz_depre_Turnaround  BigInt?
  zz_deprec_Status     String?
  Creation_Date        DateTime? @db.Timestamp(6)
  Modified_Date        DateTime? @db.Timestamp(6)
  Slug                 String?
  Creator              String?
  unique_id            String?
  is_deleted           Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_logo {
  BusinessName  String?
  Generic       String?
  IDLogo        String?
  LogoUrl       String?
  RelCustomers  String?
  RelPEBus      String?
  RelPEUserDets String?
  Type          String?
  Creation_Date DateTime? @db.Timestamp(6)
  Modified_Date DateTime? @db.Timestamp(6)
  Slug          String?
  Creator       String?
  unique_id     String?
  is_deleted    Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_order {
  CloudLink                   String?
  Currency                    String?
  DateCloudWait               DateTime? @db.Timestamp(6)
  DateCompleted               DateTime? @db.Timestamp(6)
  DateDue                     DateTime? @db.Timestamp(6)
  DatesCompUpload             String?
  DateStatusLastChange        DateTime? @db.Timestamp(6)
  EditorBusRate               Decimal?  @db.Decimal(12, 4)
  EditorBusTotal              Decimal?  @db.Decimal(12, 4)
  EditorImgCount              String?
  EditorRate                  Decimal?  @db.Decimal(12, 4)
  EditorTotal                 Decimal?  @db.Decimal(12, 4)
  EmailCompLog                String?
  FilesCompleted              String?
  FilesPreCompleted           String?
  FilesProject                String?
  FilesSource                 String?
  FLMeasurement               String?
  FLSiteplanAddon             String?
  FLStyle                     String?
  IDOrder                     String?
  IEDiscountAmount            Decimal?  @db.Decimal(12, 4)
  IERate                      Decimal?  @db.Decimal(12, 4)
  IESubTotal                  Decimal?  @db.Decimal(12, 4)
  IETotalSale                 Decimal?  @db.Decimal(12, 4)
  IEUSDEquiv                  Decimal?  @db.Decimal(12, 4)
  LowRateContact              String?
  NoOf                        BigInt?
  Notes                       String?
  OrderTitle                  String?
  QCProcessing                String?
  QCRelUserDets               String?
  Rating                      String?
  RelClientUserDets           String?
  RelDiscount                 String?
  RelEditorBus                String?
  RelEditorUserDets           String?
  RelInvoice                  String?
  RelPEBus                    String?
  RelProject                  String?
  RelServiceList              String?
  StatusOrder                 String?
  StatusPayment               String?
  ZipCompleted                String?
  ZipProject                  String?
  ZipSource                   String?
  zz_depre_ServiceCode        String?
  zz_depre_ServiceType        String?
  zz_deprec_Currency          String?
  zz_deprec_RelClientUserDets String?
  zz_deprec_RelEditorUserDets String?
  zz_deprec_StatusOrder       String?
  zz_deprec_StatusPayment     String?
  Creation_Date               DateTime? @db.Timestamp(6)
  Modified_Date               DateTime? @db.Timestamp(6)
  Slug                        String?
  Creator                     String?
  unique_id                   String?
  is_deleted                  Boolean?  @default(false)
  order_id                    String?   @unique @db.VarChar(8)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_preference {
  Preference              String?
  RelUserDets             String?
  ServiceCategory         String?
  ServiceCodes            String?
  zz_deprec_RelPEUserDets String?
  Creation_Date           DateTime? @db.Timestamptz(6)
  Modified_Date           DateTime? @db.Timestamptz(6)
  Slug                    String?
  Creator                 String?
  unique_id               String?
  is_deleted              Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_project {
  Address                     String?
  IDProject                   String?
  Name                        String?
  RelBookings                 String?
  RelBus                      String?
  RelClientUserDets           String?
  RelDelivery                 String?
  RelInvoices                 String?
  RelOrders                   String?
  RelPropertySite             String?
  zz_derpec_RelClientUserDets String?
  Creation_Date               DateTime? @db.Date
  Modified_Date               DateTime? @db.Date
  Slug                        String?
  Creator                     String?
  unique_id                   String?
  project_id                  String?   @db.VarChar(8)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_service_list {
  AlertEditorRelUserDets  String?
  Category                String?
  ClientAccess            String?
  ClientRole              String?
  CurAUD                  Decimal?  @db.Decimal(12, 4)
  CurCAD                  Decimal?  @db.Decimal(12, 4)
  CurEUR                  Decimal?  @db.Decimal(12, 4)
  CurGBP                  Decimal?  @db.Decimal(12, 4)
  CurNZD                  Decimal?  @db.Decimal(12, 4)
  CurUSD                  Decimal?  @db.Decimal(12, 4)
  Description             String?
  IconFeather             String?
  IEInternalNotes         String?
  Instructions            String?
  OrderToList             Decimal?  @db.Decimal(12, 4)
  QuantityType            String?
  RelServiceList          String?
  ServiceCode             String?
  ServiceStatus           String?
  ServiceType             String?
  ServiceTypeSubSub       String?
  Thumb                   String?
  Turnaround_hr           BigInt?
  z_deprec_Category       String?
  z_deprec_ClientType     String?
  z_deprec_ServiceTypeSub String?
  Creation_Date           DateTime? @db.Timestamp(6)
  Modified_Date           DateTime? @db.Timestamp(6)
  Slug                    String?
  Creator                 String?
  unique_id               String?
  is_deleted              Boolean?  @default(false)
  service_id              Int       @default(autoincrement()) @db.SmallInt

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_user {
  Cover_photo                           String?
  Date_agreed_to_terms_and_privacy_docs DateTime? @db.Timestamp(6)
  Date_signup_completed                 DateTime? @db.Timestamp(6)
  b_First                               String?
  First_Last                            String?
  Inactive                              String?
  b_Last                                String?
  Last_login                            DateTime? @db.Timestamp(6)
  Pending_email_verification            String?
  RateEmailVerLast                      DateTime? @db.Timestamp(6)
  RatePasswordCount                     String?
  RatePasswordLast                      String?
  RateResetEmailLast                    String?
  RelUserDetails                        String?
  b_Role                                String?
  Signup_method                         String?
  Signup_step                           BigInt?
  SignUpNote                            String?
  SignUpNoteID                          String?
  z_depre_Profile_picture               String?
  Creation_Date                         DateTime? @db.Timestamp(6)
  Modified_Date                         DateTime? @db.Timestamp(6)
  Slug                                  String?
  email                                 String?
  b_null                                String?
  unique_id                             String?
  is_deleted                            Boolean?  @default(false)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model zzz_user_dets {
  Address                   String?
  CopyEmail                 String?
  CopyFirstLast             String?
  Currency                  String?
  ID_User                   String?
  IeAccess                  String?
  Main_Profile              String?
  Max_Jobs                  Int?
  Path_Google_Cal           String?
  Path_Google_Cal_Id        String?
  Path_Google_CalColorEvent String?
  Path_Quickbooks           String?
  Path_Xero                 String?
  Pay_Air_Cust_Id           String?
  Pay_stripe_ie_indiv_cust  String?
  Pay_stripe_indivi_seller  String?
  Payment_Info              String?
  PaymentType               String?
  PhoneText                 String?
  RelBus                    String?
  RelCustomer               String?
  RelDataUsed               String?
  RelEmailNotifcation       String?
  RelEnLocation             String?
  RelPEWorkAreas            String?
  RelReffered               String?
  RelServiceListAccess      String?
  RelStaffPermissions       String?
  RelUser                   String?
  b_Role                    String?
  RoleBus                   String?
  SignUp_By_Who             String?
  SignUp_Note               String?
  SignUp_Type               String?
  WebsiteDefault            String?
  z_deprec_Currency         String?
  z_deprec_Phone            String?
  z_deprec_Role             String?
  z_deprec_RoleBus          String?
  Creation_Date             DateTime? @db.Timestamp(6)
  Modified_Date             DateTime? @db.Timestamp(6)
  Slug                      String?
  Creator                   String?
  unique_id                 String?
  is_deleted                Boolean?  @default(false)
  user_id                   String?   @db.VarChar(8)

  @@ignore
}

enum e_event_payment {
  success
  checkout
  pending
  failure
  complete
}

enum e_payment_acc_term {
  credit
  debit
}

enum e_state_editor_service {
  requested
  approved
  rejected
  cancelled
}

enum e_status_image_processing {
  uploaded
  processing
  finished
}

enum e_type_business {
  ie
  client
  editor
  customer
}

enum e_type_client {
  standard
  photographer
}

enum e_type_content {
  editing_extras @map("editing extras")
  main_images    @map("main images")
  floor_plans    @map("floor plans")
  drone_images   @map("drone images")
  virtual_tours  @map("virtual tours")
  video_content  @map("video content")
  custom_content @map("custom content")
}

enum e_type_discount {
  percent
  fixed
}

enum e_type_file_content {
  source
  output
  project
}

enum e_type_gst {
  inc
  exc
  no_gst @map("no gst")
}

enum e_type_invoice {
  sales
  purchase
}

enum e_type_invoice_creation {
  system
  ie_team @map("ie team")
  client
  editor
  other
}

enum e_type_payment {
  advance
  monthly
}

enum e_type_price {
  per_image @map("per image")
  per_floor @map("per floor")
  flat_rate @map("flat rate")
}

enum e_type_rule_group {
  page
  page_detail @map("page-detail")
  function
}
